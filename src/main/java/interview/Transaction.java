package interview;

/**
 * @author KCWang
 * @version 1.0
 * @date 2023/7/18 下午1:11
 * @Transactional(propagation = Propagation.REQUIRES_NEW)，
 *      每次都会启动一个新的事务，是Spring事务传播机制的一种级别，表示当前方法必须在自己的事务中运行，
 *      如果当前已经存在一个事务，则会挂起该事务，创建一个新的事务用于执行当前方法。当当前方法执行完成后，
 *      新事务被提交，原事务恢复执行。
 * @Transactional(propagation = Propagation.REQUIRED)，
 *
 * PROPAGATION_REQUIRED ，默认的spring事务传播级别，使用该级别的特点是，如果上下文中已经存在事务，那么就加入到事务中执行，如果当前上下文中不存在事务，
 * 则新建事务执行。所以这个级别通常能满足处理大多数的业务场景。子事务会直接影响到父事务的提交和回滚
 *
 * PROPAGATION_SUPPORTS，从字面意思就知道，supports，支持，该传播级别的特点是，如果上下文存在事务，则支持事务加入事务，如果没有事务，
 * 则使用非事务的方式执行。所以说，并非所有的包在transactionTemplate.execute中的代码都会有事务支持。这个通常是用来处理那些并非原子性的非核心业务逻辑操作。
 * 应用场景较少。
 *
 * PROPAGATION_MANDATORY ， 该级别的事务要求上下文中必须要存在事务，否则就会抛出异常！
 * 配置该方式的传播级别是有效的控制上下文调用代码遗漏添加事务控制的保证手段。比如一段代码不能单独被调用执行，但是一旦被调用，
 * 就必须有事务包含的情况，就可以使用这个传播级别。
 *
 * PROPAGATION_REQUIRES_NEW，从字面即可知道，new，每次都要一个新事务，该传播级别的特点是，每次都会新建一个事务，并
 * 且同时将上下文中的事务挂起，执行当前新建事务完成以后，上下文事务恢复再执行。
 *
 * 这是一个很有用的传播级别，举一个应用场景：现在有一个发送100个红包的操作，在发送之前，要做一些系统的初始化、验证、数据记录操作，然后发送100封红包，
 * 然后再记录发送日志，发送日志要求100%的准确，如果日志不准确，那么整个父事务逻辑需要回滚。
 * 怎么处理整个业务需求呢？就是通过这个PROPAGATION_REQUIRES_NEW 级别的事务传播控制就可以完成。发送红包的子事务不会直接影响到父事务的提交和回滚。
 *
 *
 * PROPAGATION_NOT_SUPPORTED ，这个也可以从字面得知，not supported ，不支持，当前级别的特点就是上下文中存在事务，则挂起事务，执行当前逻辑，结束后恢复上下文的事务。
 *
 * 这个级别有什么好处？可以帮助你将事务极可能的缩小。我们知道一个事务越大，它存在的风险也就越多。所以在处理事务的过程中，要保证尽可能的缩小范围。比如一段代码，
 * 是每次逻辑操作都必须调用的，比如循环1000次的某个非核心业务逻辑操作。这样的代码如果包在事务中，势必造成事务太大，导致出现一些难以考虑周全的异常情况。所以这个事务这个级别的传播级别就派上用场了。
 * 用当前级别的事务模板抱起来就可以了。
 *
 *
 * PROPAGATION_NEVER ，该事务更严格，上面一个事务传播级别只是不支持而已，有事务就挂起，而PROPAGATION_NEVER传播级别要求上下文中不能存在事务，一旦有事务，就抛出runtime异常，
 * 强制停止执行！这个级别上辈子跟事务有仇。
 *
 * PROPAGATION_NESTED ，字面也可知道，nested，嵌套级别事务。该传播级别特征是，如果上下文中存在事务，则嵌套事务执行，如果不存在事务，则新建事务。
 *
 * 那么什么是嵌套事务呢？很多人都不理解，我看过一些博客，都是有些理解偏差。
 *
 * 嵌套是子事务套在父事务中执行，子事务是父事务的一部分，在进入子事务之前，父事务建立一个回滚点，叫save point，然后执行子事务，
 * 这个子事务的执行也算是父事务的一部分，然后子事务执行结束，父事务继续执行。重点就在于那个save point。看几个问题就明了了：
 *
 * 如果子事务回滚，会发生什么？
 *
 * 父事务会回滚到进入子事务前建立的save point，然后尝试其他的事务或者其他的业务逻辑，父事务之前的操作不会受到影响，更不会自动回滚。
 *
 * 如果父事务回滚，会发生什么？
 *
 * 父事务回滚，子事务也会跟着回滚！为什么呢，因为父事务结束之前，子事务是不会提交的，我们说子事务是父事务的一部分，正是这个道理。那么：
 *
 * 事务的提交，是什么情况？
 *
 * 是父事务先提交，然后子事务提交，还是子事务先提交，父事务再提交？答案是第二种情况，还是那句话，子事务是父事务的一部分，由父事务统一提交。
 *
 * 问题1：事务中加锁导致锁失效
 *
 *
 */

public class Transaction {

}
