package interview;

/**
 * @author KCWang
 * @version 1.0
 * @date 2023/8/24 下午4:02
 *
 *    多数据源的事务问题
 *
 *    三种方案优化2000w数据大表：
 *          1、数据表分区
 *                  为什么要分区：表分区可以在区间内查询对应的数据，降低查询范围 并且索引分区 也可以进一步提高命中率，
 *                  提升查询效率   分区是指将一个表的数据按照条件分布到不同的文件上面，未分区前都是存放在一个文件上面的，
 *                  但是它还是指向的同一张表，只是把数据分散到了不同文件而已。
 *                  表分区有什么好处？
 *                  1、与单个磁盘或文件系统分区相比，可以存储更多的数据。
 *                  2、对于那些已经失去保存意义的数据，通常可以通过删除与那些数据有关的分区，很容易地删除那些数据。相反地，在某些情况下，
 *                      添加新数据的过程又可以通过为那些新数据专门增加一个新的分区，来很方便地实现。
 *                  3、一些查询可以得到极大的优化，这主要是借助于满足一个给定WHERE语句的数据可以只保存在一个或多个分区内，
 *                      这样在查找时就不用查找其他剩余的分区。因为分区可以在创建了分区表后进行修改，所以在第一次配置分区方案时还不曾这么做时，可以重新组织数据，来提高那些常用查询的效率。
 *                  4、涉及到例如SUM()和COUNT()这样聚合函数的查询，可以很容易地进行并行处理。这种查询的一个简单例子如
 *                      “SELECT salesperson_id, COUNT (orders) as order_total FROM sales GROUP BY salesperson_id；”。
 *                      通过“并行”，这意味着该查询可以在每个分区上同时进行，最终结果只需通过总计所有分区得到的结果。
 *                  5、通过跨多个磁盘来分散数据查询，来获得更大的查询吞吐量。
 *          2、数据库分表
 *          、分库分表后引入的问题
 *              1、分布式事务问题
 *                  如果我们做了垂直分库或者水平分库以后，就必然会涉及到跨库执行SQL的问题，这样就引发了互联网界的老大难问题-“分布式事务”。那要如何解决这个问题呢？
 *                  1.使用分布式事务中间件
 *                  2.使用MySQL自带的针对跨库的事务一致性方案(XA)，不过性能要比单库的慢10倍左右。3.能否避免掉跨库操作(比如将用户和商品放在同一个库中)
 *
 *              2、跨库join的问题
 *                  分库分表后表之间的关联操作将受到限制，我们无法join位于不同分库的表，也无法join分表粒度不同的表， 结果原本一次查询能够完成的业务，
 *                  可能需要多次查询才能完成。粗略的解决方法： 全局表：基础数据，所有库都拷贝一份。 字段冗余：这样有些字段就不用join去查询了。 系统层组装：分别查询出所有，然后组装起来，较复杂。
 *
 *             3、横向扩容的问题
 *              当我们使用HASH取模做分表的时候，针对数据量的递增，可能需要动态的增加表，此时就需要考虑因为reHash导致数据迁移的问题。
 *
 *             4、结果集合并、排序的问题
 *                  因为我们是将数据分散存储到不同的库、表里的，当我们查询指定数据列表时，数据来源于不同的子库或者子表，
 *                  就必然会引发结果集合并、排序的问题。如果每次查询都需要排序、合并等操作，性能肯定会受非常大的影响。走缓存可能一条路!
 *          3、冷热归档：比如：只需要展示近一周或一个月的数据。那么这种情况这一周喝一个月的数据我们称之为热数据，其余数据为冷数据。那
 */
public class ShardingJDBC {
}
